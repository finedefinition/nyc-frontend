name: Build & Deploy to Target Group YACHT-FRONTEND-TEST

on:
  push:
    branches:
      - test

env:
  AWS_ACCESS_KEY_ID: ${{ vars.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ vars.AWS_SECRET_KEY }}
  AWS_REGION: ${{ vars.AWS_REGION }}
  AWS_ACCOUNT: ${{ vars.AWS_ACCOUNT }}
  ECR_PRIVATE_REPOSITORY: ${{ vars.ECR_PRIVATE_REPOSITORY }}
  YACHT_FRONTEND_TEST_TG_ARN: ${{ vars.YACHT_FRONTEND_TEST_TG_ARN }}
  DOCKER_BUILDKIT: 1
  BUILDKIT_PROGRESS: plain

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          install: true

      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Login to Amazon ECR
        run: |
          echo "--- ENV VARIABLES ---"
          echo "AWS_REGION=${{ env.AWS_REGION }}"
          echo "AWS_ACCOUNT=${{ env.AWS_ACCOUNT }}"
          echo "ECR_PRIVATE_REPOSITORY=${{ env.ECR_PRIVATE_REPOSITORY }}"
          echo "--- AWS LOGIN ---"
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | \
          docker login --username AWS --password-stdin ${{ env.AWS_ACCOUNT }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com
          echo "AWS Login completed successfully"

      - name: Set up Next.js (penultimate version)
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'npm'

      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: |
            ${{ env.AWS_ACCOUNT }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_PRIVATE_REPOSITORY }}:${{ github.ref_name }}-latest
            ${{ env.AWS_ACCOUNT }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_PRIVATE_REPOSITORY }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          args: |
            NEXT_PUBLIC_AWS_REGION=${{ vars.AWS_REGION }}
            NEXT_PUBLIC_BUCKET_NAME=${{ vars.BUCKET_NAME }}
            NEXT_PUBLIC_SERVER_URL=${{ vars.SERVER_URL }}
            NEXT_PUBLIC_AWS_ACCESS_KEY_ID=${{ vars.AWS_ACCESS_KEY_ID }}
            NEXT_PUBLIC_AWS_SECRET_ACCESS_KEY=${{ vars.AWS_SECRET_KEY }}


  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up utility functions
        run: |
          echo "Setting up utility functions"
          cat <<- 'EOF' > /tmp/utils.sh
          #!/bin/bash

          run_command() {
            local command="$1"
            local instance="$2"
            echo "Running command: $command on instance: $instance"
            command_id=$(aws ssm send-command \
              --instance-ids "$instance" \
              --document-name "AWS-RunShellScript" \
              --parameters '{"commands": ["'"$command"'"]}' \
              --query "Command.CommandId" \
              --output text)
            echo "Command ID: $command_id"
            aws ssm wait command-executed \
              --command-id "$command_id" \
              --instance-id "$instance"
            echo "Command executed successfully"
          }
          export -f run_command
          EOF

      - name: Get EC2 instances in Target Group
        id: get_instances
        run: |
          echo "Fetching instances from target group"
          instances=$(aws elbv2 describe-target-health --target-group-arn ${{ env.YACHT_FRONTEND_TEST_TG_ARN }} --query 'TargetHealthDescriptions[*].Target.Id' --output text)
          echo "Instances found: $instances"
          echo "instances=$instances" >> $GITHUB_OUTPUT

      - name: Pull the latest Docker image
        run: |
          source /tmp/utils.sh
          echo "Pulling latest Docker image"
          instances="${{ steps.get_instances.outputs.instances }}"
          for instance in $instances; do
            run_command "docker pull ${{ env.AWS_ACCOUNT }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_PRIVATE_REPOSITORY }}:${{ github.ref_name }}-latest" "$instance"
          done

      - name: Stop running containers
        run: |
          source /tmp/utils.sh
          echo "Stopping running containers"
          instances="${{ steps.get_instances.outputs.instances }}"
          for instance in $instances; do
            run_command "cd /home/ec2-user/app && docker-compose down" "$instance"
          done

      - name: Start containers
        run: |
          source /tmp/utils.sh
          echo "Starting containers"
          instances="${{ steps.get_instances.outputs.instances }}"
          for instance in $instances; do
            run_command "cd /home/ec2-user/app && docker-compose up -d" "$instance"
          done

      - name: Remove unused Docker images
        run: |
          source /tmp/utils.sh
          echo "Removing unused Docker images"
          instances="${{ steps.get_instances.outputs.instances }}"
          for instance in $instances; do
            run_command "docker image prune -f" "$instance"
          done

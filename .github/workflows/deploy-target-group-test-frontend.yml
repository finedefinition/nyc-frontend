name: Build & Deploy

on:
  push:
    branches:
      - test

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push Docker Server image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          build-args: |
            NEXT_PUBLIC_AWS_REGION=eu-central-1
            NEXT_PUBLIC_BUCKET_NAME=nyc-basket
            NEXT_PUBLIC_SERVER_URL=https://api.norseyacht.com
            NEXT_PUBLIC_AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
            NEXT_PUBLIC_AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}

          tags: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com/${{ vars.ECR_REPOSITORY_TEST }}:${{ github.ref_name }}-latest

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Set up check_command_status script
        run: |
          cat <<- 'EOF' > /tmp/check_command_status.sh
          #!/bin/bash
          check_command_status () {
            local command_id=$1
            local instance=$2
            local status="Pending"
            while [[ "$status" == "Pending" || "$status" == "InProgress" ]]; do
              status=$(aws ssm get-command-invocation --command-id "$command_id" --instance-id "$instance" --query 'Status' --output text 2>/dev/null)
              if [ -z "$status" ]; then
                status="Pending"
              fi
              echo "Command $command_id status on instance $instance: $status"
              sleep 5
            done
            # После завершения команды выводим стандартный вывод и ошибки
            output=$(aws ssm get-command-invocation --command-id "$command_id" --instance-id "$instance" --query 'StandardOutputContent' --output text)
            error_output=$(aws ssm get-command-invocation --command-id "$command_id" --instance-id "$instance" --query 'StandardErrorContent' --output text)
            if [[ "$status" != "Success" ]]; then
              echo "Command $command_id failed with status: $status"
              echo "Standard Error:"
              echo "$error_output"
              exit 1
            else
              echo "Command $command_id succeeded with status: $status"
              echo "Standard Output:"
              echo "$output"
            fi
          }
          export -f check_command_status
          EOF

      - name: Get EC2 instances in Target Group
        id: get_instances
        run: |
          instances=$(aws elbv2 describe-target-health --target-group-arn ${{ vars.AWS_TG_CLIENT_ARN_TEST }} --query 'TargetHealthDescriptions[*].Target.Id' --output text)
          echo "Instances found: $instances"
          echo "instances=$instances" >> $GITHUB_OUTPUT
      - name: Pull latest Docker image
        env:
          AWS_REGION: ${{ vars.AWS_REGION }}
          IMAGE_FULL_NAME: '${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com/${{ vars.ECR_REPOSITORY_TEST }}:${{ github.ref_name }}-latest'
        run: |
          source /tmp/check_command_status.sh
          instances="${{ steps.get_instances.outputs.instances }}"
          for instance in $instances
          do
            echo "Pulling Docker image on instance: $instance"
            command_id=$(aws ssm send-command \
              --instance-ids "$instance" \
              --document-name "AWS-RunShellScript" \
              --parameters '{"commands": [
                "cd /home/ec2-user/app && docker pull '"$IMAGE_FULL_NAME"'"
              ]}' \
              --region "$AWS_REGION" \
              --query "Command.CommandId" \
              --output text)
            check_command_status "$command_id" "$instance"
          done

      - name: Stop running containers using docker-compose down
        env:
          AWS_REGION: ${{ vars.AWS_REGION }}
        run: |
          source /tmp/check_command_status.sh
          instances="${{ steps.get_instances.outputs.instances }}"
          for instance in $instances
          do
            echo "Stopping containers on instance: $instance"
            command_id=$(aws ssm send-command \
              --instance-ids "$instance" \
              --document-name "AWS-RunShellScript" \
              --parameters '{"commands": [
                "cd /home/ec2-user/app && docker-compose down"
              ]}' \
              --region "$AWS_REGION" \
              --query "Command.CommandId" \
              --output text)
            check_command_status "$command_id" "$instance"
          done

      - name: Start containers using docker-compose up -d
        env:
          AWS_REGION: ${{ vars.AWS_REGION }}
        run: |
          source /tmp/check_command_status.sh
          instances="${{ steps.get_instances.outputs.instances }}"
          for instance in $instances
          do
            echo "Starting containers on instance: $instance"
            command_id=$(aws ssm send-command \
              --instance-ids "$instance" \
              --document-name "AWS-RunShellScript" \
              --parameters '{"commands": [
                "cd /home/ec2-user/app && docker-compose up -d"
              ]}' \
              --region "$AWS_REGION" \
              --query "Command.CommandId" \
              --output text)
            check_command_status "$command_id" "$instance"
          done

      - name: Remove unused Docker images
        env:
          AWS_REGION: ${{ vars.AWS_REGION }}
        run: |
          source /tmp/check_command_status.sh
          instances="${{ steps.get_instances.outputs.instances }}"
          for instance in $instances
          do
            echo "Pruning Docker images on instance: $instance"
            command_id=$(aws ssm send-command \
              --instance-ids "$instance" \
              --document-name "AWS-RunShellScript" \
              --parameters '{"commands": [
                "docker image prune -f"
              ]}' \
              --region "$AWS_REGION" \
              --query "Command.CommandId" \
              --output text)
            check_command_status "$command_id" "$instance"
          done
